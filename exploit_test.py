import threading, time
import socket
from protocol import encode_packet, decode_packet

HOST = '127.0.0.1'
PORT = 5000

def recv_and_print(sock):
    try:
        data = sock.recv(1024)
        if not data:
            return ""
        try:
            seq, typ, payload = decode_packet(data)
            print(f"[Server] seq={seq}, type={typ}, payload='{payload}'")
            return payload
        except Exception as e:
            print(f"[ERROR] Failed to decode: {e} (raw={data})")
            return ""
    except socket.timeout:
        print("[ERROR] Socket timeout")
        return ""
    
def dummy_victim():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.settimeout(5)
        sock.connect((HOST, PORT))
        recv_and_print(sock)
        sock.sendall(encode_packet(1, 1, "victim"))
        while True:
            payload = recv_and_print(sock)
            if "Enter coordinate" in payload:
                time.sleep(0.2)  # Slight delay to let attacker send first
                sock.sendall(encode_packet(2, 1, "A1"))  # Legit move
                break

# Start victim thread
threading.Thread(target=dummy_victim, daemon=True).start()

# Delay to ensure victim connects first
time.sleep(0.5)

# === Exploit attacker ===
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.settimeout(5)
    s.connect((HOST, PORT))
    recv_and_print(s)
    s.sendall(encode_packet(1, 1, "attacker"))

    # Wait for coordinate prompt
    while True:
        payload = recv_and_print(s)
        if "Enter coordinate" in payload:
            break

    print("[*] Sending valid move with seq=50")
    pkt = encode_packet(50, 1, "B5")
    s.sendall(pkt)
    recv_and_print(s)

    print("[!] Replaying same move (seq=50)")
    replay_pkt = encode_packet(50, 1, "B5")  # regenerate to avoid socket state issues
    s.sendall(replay_pkt)
    time.sleep(0.3)
    response = recv_and_print(s)

    if not response:
        print("[✓] Replay attack was detected and dropped (no response).")
    elif "replay" in response.lower() or "security" in response.lower() or "checksum" in response.lower():
        print("[✓] Replay attack was successfully detected and blocked.")
    else:
        print("[✗] Replay attack might have been accepted — investigate!")